
Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ clear

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ git -v
unknown option: -v
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ git --version
git version 2.17.0.windows.1

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ ls CopyFOLDER/
ls: cannot access 'CopyFOLDER/': No such file or directory

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ ls CopyFolder/
ls: cannot access 'CopyFolder/': No such file or directory

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ rm -rf CopyFolder/

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ ls
my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/CopyFolder
$ cd ../

Student@LIB-08 MINGW64 /d/FrontEnd
$ ls
CopyFolder/  my.txt

Student@LIB-08 MINGW64 /d/FrontEnd
$ rm -rf CopyFOLDER/

Student@LIB-08 MINGW64 /d/FrontEnd
$ rm -rf CopyFolder/

Student@LIB-08 MINGW64 /d/FrontEnd
$ ls
my.txt

Student@LIB-08 MINGW64 /d/FrontEnd
$ mkdir GitTest

Student@LIB-08 MINGW64 /d/FrontEnd
$ cd GitTest/

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest
$ ls

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest
$ git init
Initialized empty Git repository in D:/FRONTEND/GitTest/.git/

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ ls -a
./  ../  .git/

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git config --global user.name "otiko"

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git config --global user.email 'otikopotskhoraia@gmail.com"
>
>
> git config --list
> clear
> ls
> ``
> clear
> git config --global user.name "otiko"
>
>
> exit
> clear
> ls
> ^C

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git list --list
git: 'list' is not a git command. See 'git --help'.

The most similar commands are
        bisect
        rev-list

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git config --list
core.symlinks=false
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
rebase.autosquash=true
http.sslcainfo=C:/Users/Student/AppData/Local/Programs/Git/mingw64/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=manager
core.editor=nano.exe
user.name=otiko
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git config --global user.email "otikopotskhoraia@gmail.com'
> ^C

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git config --global user.email "otikopotskhoraia@gmail.com"

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git config --list
core.symlinks=false
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
rebase.autosquash=true
http.sslcainfo=C:/Users/Student/AppData/Local/Programs/Git/mingw64/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=manager
core.editor=nano.exe
user.name=otiko
user.email=otikopotskhoraia@gmail.com
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ touch my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git init
Reinitialized existing Git repository in D:/FRONTEND/GitTest/.git/

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ start .

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ open .
bash: open: command not found

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        my.txt

nothing added to commit but untracked files present (use "git add" to track)

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git add my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   my.txt


Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git commit -m "initial commit"
[master (root-commit) 91eb518] initial commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git log
commit 91eb518fcee9d950a6831929e8acf2f9244d3381 (HEAD -> master)
Author: otiko <otikopotskhoraia@gmail.com>
Date:   Wed May 2 20:58:02 2018 +0400

    initial commit

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git branch
* master

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ ls
my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git branch testBranch

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git branch
* master
  testBranch

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ ls
my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git checkout testBranch
Switched to branch 'testBranch'

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ ls
my.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ touch testBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git  add testBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git commit -m"testBranch.txt"
[testBranch 61f4db5] testBranch.txt
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 testBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ nano textBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git status
On branch testBranch
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        textBranch.txt

nothing added to commit but untracked files present (use "git add" to track)

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git add textBranch.txt
warning: LF will be replaced by CRLF in textBranch.txt.
The file will have its original line endings in your working directory.

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git status
On branch testBranch
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   textBranch.txt


Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git checkout master
Switched to branch 'master'
A       textBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   textBranch.txt


Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git branch
* master
  testBranch

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ ls
my.txt  textBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (master)
$ git checkout testBranch
Switched to branch 'testBranch'
A       textBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ ls
my.txt  testBranch.txt  textBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ ls
my.txt  testBranch.txt  textBranch.txt

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git remote -v

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git remote add origin
usage: git remote add [<options>] <name> <url>

    -f, --fetch           fetch the remote branches
    --tags                import all tags and associated objects when fetching
                          or do not fetch any tag at all (--no-tags)
    -t, --track <branch>  branch(es) to track
    -m, --master <branch>
                          master branch
    --mirror[=<push|fetch>]
                          set up remote as a mirror to push to or fetch from


Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git remote add origin
usage: git remote add [<options>] <name> <url>

    -f, --fetch           fetch the remote branches
    --tags                import all tags and associated objects when fetching
                          or do not fetch any tag at all (--no-tags)
    -t, --track <branch>  branch(es) to track
    -m, --master <branch>
                          master branch
    --mirror[=<push|fetch>]
                          set up remote as a mirror to push to or fetch from


Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git remote add origin https://github.com/roglol/test.git

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git remote -v
origin  https://github.com/roglol/test.git (fetch)
origin  https://github.com/roglol/test.git (push)

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$ git push -u origin testBranch

Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 423 bytes | 423.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0)
To https://github.com/roglol/test.git
 * [new branch]      testBranch -> testBranch
Branch 'testBranch' set up to track remote branch 'testBranch' from 'origin'.

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$

Student@LIB-08 MINGW64 /d/FrontEnd/GitTest (testBranch)
$
